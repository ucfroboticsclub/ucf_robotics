SCRIPT_VER=8
MAX_CHANNELS=2

' Motor controller configuration. Much of this is particular to Grizzly
' and can be generalized/parameterized as the need arises. Page numbers
' are a reference to this document:
' www.roboteq.com/index.php/docman/motor-controllers-documents-and-files/documentation/user-manual/7-nextgen-controllers-user-manual/file

setconfig(_ECHOF, 1) ' Serial echo off (p195)
setconfig(_RWD, 110) ' Watchdog timeout, milliseconds (p195)

' Undervoltage/overvoltage limits (p214)
setconfig(_OVL, 350)
setconfig(_UVL, 50)

' Encoder to Wheel is 32:1
' Encoder, speed config (p208, p221)
setconfig(_EMOD, 1, 18)	
setconfig(_EPPR, 1, 180) ' Encoder Pulses Per Rev / Cycles Per Rev ( CPR = 180 )
setconfig(_MXRPM, 1, 4200) ' Assumes gear ratio of 32.67:1

' Current limit (p216)
setconfig(_ALIM, 1, 350)
setconfig(_ATGA, 1, 2000)
setconfig(_ATGD, 1, 50)
setconfig(_ATRIG, 1, 0)

' Max acceleration/deceleration (p219)
setconfig(_MAC, 1, 15000)
setconfig(_MDEC, 1, 15000)

' Closed-loop control (p216-218)
setconfig(_MMOD, 1, 1) ' Closed-loop Speed
setconfig(_KP, 1, 0)
setconfig(_KI, 1, 10)
setconfig(_KD, 1, 0)
setconfig(_ICAP, 1, 100)
setconfig(_CLERD, 1, 0)

'-----------------------------------------------------------------------------------------------------------


' Encoder to Wheel is 32:1
' Encoder, speed config (p208, p221)
setconfig(_EMOD, 2, 34)
setconfig(_EPPR, 2, 180)
setconfig(_MXRPM, 2, 4200)

' Current limit (p216)
setconfig(_ALIM, 2, 350)
setconfig(_ATGA, 2, 2000)
setconfig(_ATGD, 2, 50)
setconfig(_ATRIG, 2, 0)

' Max acceleration/deceleration (p219)
setconfig(_MAC, 2, 15000)
setconfig(_MDEC, 2, 15000)

' Closed-loop control (p216-218)
setconfig(_MMOD, 2, 1)
setconfig(_KP, 2, 0)
setconfig(_KI, 2, 10)
setconfig(_KD, 2, 0)
setconfig(_ICAP, 2, 100)
setconfig(_CLERD, 2, 0)


'User-variable to control command-control
setcommand(_VAR, 0, 0)

setcommand(_BOOL, 5, 0)

setcommand(_BOOL, 6, 0)
setcommand(_D0, 1)

top:
		
	EStop = getvalue(_BOOL, 5) ' Boolean set via serial
		
	ForceRC = getvalue(_DI, 6)
	if ForceRC = 1 then
		EStop = 0
	end if
	
	' EStop
	if ( getvalue(_PI, 3) < 1700 Or EStop ) then
		setcommand(_EX, 0)
		wait(5)
		goto top
	else
		setcommand(_MG, 0)
	end if
	

	' Man/Autonomous switch
	if getvalue(_PI, 4) > 1700 then
		' give a variable the computer can reference to get status of man/autonmous
		setcommand(_BOOL, 6, 1) 
		setcommand(_D1, 1)
	else
		setcommand(_BOOL, 6, 0)
		setcommand(_D0, 1)
	end if
		
	if ForceRC = 1 then
		setcommand(_MXMD, 1)
		Throttle = getvalue(_CIP, 1)
		Steering = getvalue(_CIP, 2)
		
		setcommand(_G, 1, Throttle)
		setcommand(_G, 2, Steering)
		
		wait(10)
	else
		setcommand(_MXMD, 0)
		for ch = 1 andwhile ch <= MAX_CHANNELS evaluate ch++
			if getvalue(_BOOL, ch) = 1 then
				GoSub PrintFeedback  ' 25 Hz
			end if
		next
		c++
		if c = 5 then
			GoSub PrintStatus  ' 5 Hz
			c = 0
		end if
		wait(19)
	end if
	goto top
	

PrintFeedback:
	print("&f:", ch)
	print(":", getvalue(_MOTAMPS, ch))
	print(":", getvalue(_MOTCMD, ch))
	print(":", getvalue(_MOTPWR, ch))
	print(":", getvalue(_ABSPEED, ch))
	print(":", getvalue(_ABCNTR, ch))
	print(":", getvalue(_VOLTS, 2))
	print(":", getvalue(_BATAMPS, ch))
	print(":", getvalue(_ANAIN, ch))
	print(":", getvalue(_TEMP, ch+1))
	print("\r")
	Return
	
PrintStatus:
	print("&s:", SCRIPT_VER)
	print(":", getvalue(_FLTFLAG))
	print(":", getvalue(_STFLAG))
	print(":", getvalue(_VOLTS, 1))
	print(":", getvalue(_VOLTS, 3))
	print(":", getvalue(_TEMP, 1))
	print("\r")
	Return
